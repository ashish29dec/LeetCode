class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int rows = graph.length;
        int cols = graph[0].length;
        
        HashSet<Integer>[] initialInfections = new HashSet[initial.length];
        for (int i = 0; i < initial.length; i++) {
            int infectedNode = initial[i];
            HashSet<Integer> infectedNodes = new HashSet<>();
            infectedNodes.add(infectedNode);
            HashSet<Integer> visited = new HashSet<>();
            ArrayList<Integer> children = new ArrayList<>();
            children.add(infectedNode);
            visited.add(infectedNode);
            while(children.size() > 0) {
                Integer node = children.remove(0);
                int[] adjacent = graph[node];
                for (int j = 0; j < adjacent.length; j++) {
                    if (graph[node][j] == 0) {
                        continue;
                    }
                    if (visited.contains(j)) {
                        continue;
                    }
                    children.add(j);
                    visited.add(j);
                    infectedNodes.add(j);
                }
            }
            initialInfections[i] = infectedNodes;
        }
        
        // We have infections caused by the initial nodes in the array
        HashSet<Integer>[] infections = new HashSet[initial.length];
        for (int i = 0; i < initial.length; i++) {
            HashSet<Integer> inf = new HashSet<>();
            if (i == 0) {
                infections[i] = inf;
                continue;
            }
            infections[i] = mergeHashSets(initialInfections[i-1], infections[i-1]);
        }
        
        HashSet<Integer> temp = initialInfections[initial.length - 1];
        initialInfections[initial.length - 1] = new HashSet<>();
        for (int i = initial.length - 2; i >= 0; i--) {
            HashSet<Integer> n = initialInfections[i];
            initialInfections[i] = mergeHashSets(initialInfections[i+1], temp);
            temp = n;
        }
        
        for (int i = 0; i < initial.length; i++) {
        	initialInfections[i] = mergeHashSets(initialInfections[i], infections[i]);
        }
        
        // We have infected nodes for each case when a particular node is removed
        // Return the node with maximum number of uninfected nodes
        int maxCount = 0;
        int nodeToRemove = graph.length;
        for (int i = 0; i < initial.length; i++) {
            int uninfectedNodes = graph.length - initialInfections[i].size();
            if (uninfectedNodes > maxCount) {
                maxCount = uninfectedNodes;
                nodeToRemove = initial[i];
            } else if (uninfectedNodes == maxCount && nodeToRemove > initial[i]) {
                nodeToRemove = initial[i];
            }
        }
        
        return nodeToRemove;
    }
    
    private HashSet<Integer> mergeHashSets(HashSet<Integer> one, HashSet<Integer> two) {
        HashSet<Integer> res = new HashSet<>();
        Iterator<Integer> iterator = one.iterator();
        while(iterator.hasNext()) {
            res.add(iterator.next());
        }
        
        iterator = two.iterator();
        while(iterator.hasNext()) {
            res.add(iterator.next());
        }
        
        return res;
    }
}